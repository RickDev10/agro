/**
 * Wrapper para APIs Protegidas
 * 
 * Este wrapper garante que todas as APIs protegidas tenham verifica√ß√£o de autentica√ß√£o
 * antes de processar a requisi√ß√£o.
 */

import { NextRequest, NextResponse } from 'next/server'
import { authenticateRequest, checkRateLimit, type AuthenticatedUser } from '@/middleware/auth'

export interface AuthenticatedRequest extends NextRequest {
  user: AuthenticatedUser['user']
  userId: string
  userEmail: string | null
}

/**
 * Wrapper que adiciona autentica√ß√£o a qualquer handler de API
 */
export function withAuth(handler: Function) {
  return async (request: NextRequest, ...args: any[]) => {
    try {
      console.log(`üîê Verificando autentica√ß√£o para: ${request.method} ${request.url}`)
      
      // Verificar rate limiting
      const rateLimitOk = await checkRateLimit(request, 100) // 100 requests por hora
      if (!rateLimitOk) {
        console.log('‚ùå Rate limit excedido')
        return NextResponse.json(
          { error: 'Muitas requisi√ß√µes. Tente novamente mais tarde.' },
          { status: 429 }
        )
      }

      // Verificar autentica√ß√£o
      const authResult = await authenticateRequest(request)
      
      if (!authResult) {
        console.log('‚ùå Usu√°rio n√£o autenticado')
        return NextResponse.json(
          { error: 'Acesso negado. Fa√ßa login para continuar.' },
          { status: 401 }
        )
      }

      // Adicionar dados do usu√°rio ao request
      const authenticatedRequest = request as AuthenticatedRequest
      authenticatedRequest.user = authResult.user
      authenticatedRequest.userId = authResult.userId
      authenticatedRequest.userEmail = authResult.userEmail

      console.log(`‚úÖ Usu√°rio autenticado: ${authResult.userEmail}`)
      
      // Executar o handler original com dados de autentica√ß√£o
      return await handler(authenticatedRequest, ...args)
      
    } catch (error) {
      console.error('‚ùå Erro no wrapper de autentica√ß√£o:', error)
      return NextResponse.json(
        { error: 'Erro interno do servidor' },
        { status: 500 }
      )
    }
  }
}

/**
 * Wrapper para APIs que requerem permiss√µes espec√≠ficas
 */
export function withPermission(resource: string, action: 'read' | 'write' | 'delete' | 'admin') {
  return function(handler: Function) {
    return withAuth(async (request: AuthenticatedRequest, ...args: any[]) => {
      try {
        // Aqui voc√™ pode implementar verifica√ß√£o de permiss√µes mais granulares
        // Por enquanto, vamos permitir todas as opera√ß√µes para usu√°rios autenticados
        console.log(`üîë Verificando permiss√£o ${action} em ${resource} para usu√°rio ${request.userEmail}`)
        
        return await handler(request, ...args)
      } catch (error) {
        console.error('‚ùå Erro na verifica√ß√£o de permiss√µes:', error)
        return NextResponse.json(
          { error: 'Sem permiss√£o para esta opera√ß√£o' },
          { status: 403 }
        )
      }
    })
  }
}

/**
 * Wrapper apenas para administradores
 */
export function withAdminAuth(handler: Function) {
  return withPermission('admin', 'admin')(handler)
}

/**
 * Utilit√°rio para extrair dados da requisi√ß√£o de forma segura
 */
export async function getRequestData(request: NextRequest) {
  try {
    const body = await request.json()
    
    // Valida√ß√µes b√°sicas de seguran√ßa
    if (typeof body !== 'object' || body === null) {
      throw new Error('Dados inv√°lidos')
    }
    
    return body
  } catch (error) {
    throw new Error('Formato de dados inv√°lido')
  }
}

/**
 * Utilit√°rio para logs de auditoria
 */
export function logActivity(
  userId: string,
  action: string,
  resource: string,
  details?: any
) {
  // Por enquanto, apenas console.log
  // Em produ√ß√£o, salvar no banco de dados
  console.log(`üìù AUDIT: ${userId} realizou ${action} em ${resource}`, details)
}
