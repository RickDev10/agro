import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase'

// GET - Buscar todos os funcionários
export async function GET() {
  try {
    const supabase = createClient()
    
    const { data, error } = await supabase
      .from('funcionarios')
      .select('*')
      .order('nome', { ascending: true })

    if (error) {
      throw error
    }

    return NextResponse.json({ success: true, data: data || [] })
  } catch (error) {
    console.error('Erro ao buscar funcionários:', error)
    return NextResponse.json(
      { success: false, error: 'Erro ao buscar funcionários' },
      { status: 500 }
    )
  }
}

// POST - Criar novo funcionário
export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { nome, numero } = body

    if (!nome) {
      return NextResponse.json(
        { success: false, error: 'Nome é obrigatório' },
        { status: 400 }
      )
    }

    const supabase = createClient()
    
    const { data, error } = await supabase
      .from('funcionarios')
      .insert({
        nome,
        numero: numero || null
      })
      .select()
      .single()

    if (error) {
      throw error
    }

    return NextResponse.json({ success: true, data })
  } catch (error) {
    console.error('Erro ao criar funcionário:', error)
    return NextResponse.json(
      { success: false, error: 'Erro ao criar funcionário' },
      { status: 500 }
    )
  }
}

// PUT - Atualizar funcionário
export async function PUT(request: NextRequest) {
  try {
    const body = await request.json()
    const { id, nome, numero } = body

    if (!id || !nome) {
      return NextResponse.json(
        { success: false, error: 'ID e nome são obrigatórios' },
        { status: 400 }
      )
    }

    const supabase = createClient()
    
    const { data, error } = await supabase
      .from('funcionarios')
      .update({
        nome,
        numero: numero || null,
        updated_at: new Date().toISOString()
      })
      .eq('id', id)
      .select()
      .single()

    if (error) {
      throw error
    }

    return NextResponse.json({ success: true, data })
  } catch (error) {
    console.error('Erro ao atualizar funcionário:', error)
    return NextResponse.json(
      { success: false, error: 'Erro ao atualizar funcionário' },
      { status: 500 }
    )
  }
}

// DELETE - Excluir funcionário
export async function DELETE(request: NextRequest) {
  try {
    const body = await request.json()
    const { id } = body

    if (!id) {
      return NextResponse.json(
        { success: false, error: 'ID é obrigatório' },
        { status: 400 }
      )
    }

    const supabase = createClient()
    
    const { error } = await supabase
      .from('funcionarios')
      .delete()
      .eq('id', id)

    if (error) {
      throw error
    }

    return NextResponse.json({ success: true })
  } catch (error) {
    console.error('Erro ao excluir funcionário:', error)
    return NextResponse.json(
      { success: false, error: 'Erro ao excluir funcionário' },
      { status: 500 }
    )
  }
}
