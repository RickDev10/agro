/**
 * API Segura de Funcion√°rios
 * 
 * Exemplo de como implementar uma API completamente protegida
 * com autentica√ß√£o, autoriza√ß√£o e auditoria.
 */

import { NextRequest, NextResponse } from 'next/server'
import { withAuth, withPermission, getRequestData, logActivity, type AuthenticatedRequest } from '@/lib/protected-api'
import { AuthenticatedRepository } from '@/lib/supabase/authenticated'
import { extractTokenFromRequest } from '@/lib/supabase/authenticated'

// Tipos
interface Funcionario {
  id: number
  nome: string
  numero?: string
  created_by: string
  created_at: string
  updated_at?: string
  updated_by?: string
}

interface FuncionarioCreateData {
  nome: string
  numero?: string
}

interface FuncionarioUpdateData extends FuncionarioCreateData {
  id: number
}

// GET - Buscar todos os funcion√°rios (com autentica√ß√£o)
async function handleGet(request: AuthenticatedRequest) {
  try {
    console.log('üîç GET /api/funcionarios/secure - Usu√°rio autenticado:', request.userEmail)
    
    const userToken = extractTokenFromRequest(request)
    if (!userToken) {
      return NextResponse.json(
        { error: 'Token n√£o encontrado' },
        { status: 401 }
      )
    }

    const repository = new AuthenticatedRepository<Funcionario>('funcionarios', userToken)
    const result = await repository.findAll()
    
    if (result.error) {
      throw new Error(result.error)
    }

    // Log da atividade
    logActivity(request.userId, 'READ', 'funcionarios', { count: result.data?.length || 0 })

    console.log('‚úÖ Funcion√°rios encontrados:', result.data?.length || 0)
    return NextResponse.json({ 
      success: true, 
      data: result.data || [] 
    })
    
  } catch (error) {
    console.error('‚ùå Erro ao buscar funcion√°rios:', error)
    return NextResponse.json(
      { error: 'Erro ao buscar funcion√°rios' },
      { status: 500 }
    )
  }
}

// POST - Criar novo funcion√°rio (com autentica√ß√£o e permiss√£o)
async function handlePost(request: AuthenticatedRequest) {
  try {
    console.log('üîç POST /api/funcionarios/secure - Usu√°rio:', request.userEmail)
    
    const userToken = extractTokenFromRequest(request)
    if (!userToken) {
      return NextResponse.json(
        { error: 'Token n√£o encontrado' },
        { status: 401 }
      )
    }

    // Validar dados da requisi√ß√£o
    const data = await getRequestData(request) as FuncionarioCreateData
    
    if (!data.nome || data.nome.trim().length === 0) {
      return NextResponse.json(
        { error: 'Nome √© obrigat√≥rio' },
        { status: 400 }
      )
    }

    if (data.nome.length > 100) {
      return NextResponse.json(
        { error: 'Nome deve ter no m√°ximo 100 caracteres' },
        { status: 400 }
      )
    }

    // Criar funcion√°rio
    const repository = new AuthenticatedRepository<Funcionario>('funcionarios', userToken)
    const result = await repository.create(
      {
        nome: data.nome.trim(),
        numero: data.numero?.trim() || null
      },
      request.userId
    )
    
    if (result.error) {
      throw new Error(result.error)
    }

    // Log da atividade
    logActivity(request.userId, 'CREATE', 'funcionarios', { 
      funcionario_id: result.data?.id,
      nome: data.nome 
    })

    console.log('‚úÖ Funcion√°rio criado:', result.data?.id)
    return NextResponse.json({ 
      success: true, 
      data: result.data 
    })
    
  } catch (error) {
    console.error('‚ùå Erro ao criar funcion√°rio:', error)
    return NextResponse.json(
      { error: error instanceof Error ? error.message : 'Erro ao criar funcion√°rio' },
      { status: 500 }
    )
  }
}

// PUT - Atualizar funcion√°rio (com autentica√ß√£o e permiss√£o)
async function handlePut(request: AuthenticatedRequest) {
  try {
    console.log('üîç PUT /api/funcionarios/secure - Usu√°rio:', request.userEmail)
    
    const userToken = extractTokenFromRequest(request)
    if (!userToken) {
      return NextResponse.json(
        { error: 'Token n√£o encontrado' },
        { status: 401 }
      )
    }

    // Validar dados da requisi√ß√£o
    const data = await getRequestData(request) as FuncionarioUpdateData
    
    if (!data.id) {
      return NextResponse.json(
        { error: 'ID √© obrigat√≥rio' },
        { status: 400 }
      )
    }

    if (!data.nome || data.nome.trim().length === 0) {
      return NextResponse.json(
        { error: 'Nome √© obrigat√≥rio' },
        { status: 400 }
      )
    }

    if (data.nome.length > 100) {
      return NextResponse.json(
        { error: 'Nome deve ter no m√°ximo 100 caracteres' },
        { status: 400 }
      )
    }

    // Atualizar funcion√°rio
    const repository = new AuthenticatedRepository<Funcionario>('funcionarios', userToken)
    const result = await repository.update(
      data.id,
      {
        nome: data.nome.trim(),
        numero: data.numero?.trim() || null
      },
      request.userId
    )
    
    if (result.error) {
      if (result.error.includes('No rows')) {
        return NextResponse.json(
          { error: 'Funcion√°rio n√£o encontrado ou sem permiss√£o para editar' },
          { status: 404 }
        )
      }
      throw new Error(result.error)
    }

    // Log da atividade
    logActivity(request.userId, 'UPDATE', 'funcionarios', { 
      funcionario_id: data.id,
      nome: data.nome 
    })

    console.log('‚úÖ Funcion√°rio atualizado:', data.id)
    return NextResponse.json({ 
      success: true, 
      data: result.data 
    })
    
  } catch (error) {
    console.error('‚ùå Erro ao atualizar funcion√°rio:', error)
    return NextResponse.json(
      { error: error instanceof Error ? error.message : 'Erro ao atualizar funcion√°rio' },
      { status: 500 }
    )
  }
}

// DELETE - Excluir funcion√°rio (com autentica√ß√£o e permiss√£o)
async function handleDelete(request: AuthenticatedRequest) {
  try {
    console.log('üîç DELETE /api/funcionarios/secure - Usu√°rio:', request.userEmail)
    
    const userToken = extractTokenFromRequest(request)
    if (!userToken) {
      return NextResponse.json(
        { error: 'Token n√£o encontrado' },
        { status: 401 }
      )
    }

    // Validar dados da requisi√ß√£o
    const data = await getRequestData(request) as { id: number }
    
    if (!data.id) {
      return NextResponse.json(
        { error: 'ID √© obrigat√≥rio' },
        { status: 400 }
      )
    }

    // Verificar se o funcion√°rio existe antes de excluir
    const repository = new AuthenticatedRepository<Funcionario>('funcionarios', userToken)
    const existing = await repository.findById(data.id)
    
    if (existing.error || !existing.data) {
      return NextResponse.json(
        { error: 'Funcion√°rio n√£o encontrado ou sem permiss√£o para excluir' },
        { status: 404 }
      )
    }

    // Excluir funcion√°rio
    const result = await repository.delete(data.id)
    
    if (result.error) {
      throw new Error(result.error)
    }

    // Log da atividade
    logActivity(request.userId, 'DELETE', 'funcionarios', { 
      funcionario_id: data.id,
      nome: existing.data.nome
    })

    console.log('‚úÖ Funcion√°rio exclu√≠do:', data.id)
    return NextResponse.json({ 
      success: true,
      message: 'Funcion√°rio exclu√≠do com sucesso'
    })
    
  } catch (error) {
    console.error('‚ùå Erro ao excluir funcion√°rio:', error)
    return NextResponse.json(
      { error: error instanceof Error ? error.message : 'Erro ao excluir funcion√°rio' },
      { status: 500 }
    )
  }
}

// Aplicar middlewares de seguran√ßa
export const GET = withPermission('funcionarios', 'read')(handleGet)
export const POST = withPermission('funcionarios', 'write')(handlePost)
export const PUT = withPermission('funcionarios', 'write')(handlePut)
export const DELETE = withPermission('funcionarios', 'delete')(handleDelete)
